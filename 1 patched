#include <iostream>
 #include <string>
 
 using namespace std;
 
 struct Node {
   string data;
   int data2;
   double data3;
   Node* next;
 
   Node(string str, int num, double d) : data(str), data2(num), data3(d), next(nullptr) {}
 };
 
 class List {
 private:
   Node* top;
   int size;
 public:
   List() : top(nullptr), size(0) {}
 
   void print() const {
     Node* current = top;
     cout << "============================" << endl;
     for (int i = 0; i < size; i++) {
       cout << i << ": " << endl;
       cout << current->data << endl;
       cout << current->data2 << endl;
       cout << current->data3 << endl;
       cout << "============================" << endl;
       current = current->next;
     }
   }
 
   void push_back(const string& str, int n, double d) {
     if (size == 0) {
       top = new Node(str, n, d);
     }
     else {
       Node* new_node = new Node(str, n, d);
       Node* current = top;
       for (int i = 0; i < size - 1; i++) {
         current = current->next;
       }
       current->next = new_node;
     }
     size++;
   }
 
   void push_front(const string& str, int n, double d) {
     if (size == 0) {
       top = new Node(str, n, d);
     }
     else {
       Node* new_node = new Node(str, n, d);
       new_node->next = top;
       top = new_node;
     }
     size++;
   }
 
   void add_after(const string& str, int n, double d, int index) {
     if (index >= size or index < 0) {
       cout << "Incorrect index " << index << endl;
       return;
     }
     if (index == size - 1) {
       push_back(str, n, d);
     }
     else {
       Node* new_node = new Node(str, n, d);
       Node* current = top;
       for (int i = 0; i < index; i++) {
         current = current->next;
       }
 
       Node* next = current->next;
       current->next = new_node;
       new_node->next = next;
       size++;
     }
   }
 
   void add_before(const string& str, int n, double d, int index) {
     if (index >= size or index < 0) {
       cout << "Incorrect index " << index << endl;
       return;
     }
     if (index == 0) {
       push_front(str, n, d);
     }
     else {
       Node* new_node = new Node(str, n, d);
       Node* current = top;
       for (int i = 0; i < index - 1; i++) {
         current = current->next;
       }
 
       Node* next = current->next;
       current->next = new_node;
       new_node->next = next;
       size++;
     }
   }
 
   void erase(int index) {
     if (index >= size or index < 0) {
       cout << "Incorrect index " << index << endl;
       return;
     }
     if (index == 0) {
       Node* temp = top;
       top = top->next;
       delete temp;
       return;
     }
       Node* current = top;
      for(int i=0; i<index-1; i++)
      {
            current = current->next;
      }
      Node* toDelete = current->next;
      current->next=toDelete->next;
      delete toDelete;
      
     size--;
   }
 };
 
 int main() {
 
  List list;
   list.push_back("Hello", 10, 12.5);
 
   list.print();
 
   list.push_front("aboba", 6, 2.34);
 
   cout << "\n===================\n";
 
   list.print();
 
   list.push_back("qwerty", 112, 3.3);
 
   cout << "\n===================\n";
 
   list.print();
 
   list.add_after("test_after", 52, 6.11, 1);
 
   cout << "\n===================\n";
 
   list.print();
 
   list.add_before("test_before", 84, 11.5, 3);
 
   cout << "\n===================\n";
 
   list.print();
 
   list.erase(1);
